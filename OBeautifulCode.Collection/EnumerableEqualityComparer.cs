// --------------------------------------------------------------------------------------------------------------------
// <copyright file="EnumerableEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Collection source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Collection.Recipes
{
    using System.Collections.Generic;
    using System.Linq;

    using OBeautifulCode.Math.Recipes;

    /// <summary>
    /// An implementation of <see cref="IEqualityComparer{T}"/> for any <see cref="IEnumerable{T}"/>.
    /// </summary>
    /// <remarks>
    /// Adapted from: <a href="https://stackoverflow.com/a/14675741/356790" />.
    /// </remarks>
    /// <typeparam name="T">The type of objects to enumerate.</typeparam>
#if !OBeautifulCodeCollectionRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Collection", "See package version number")]
    internal
#else
    public
#endif
        class EnumerableEqualityComparer<T> : IEqualityComparer<IEnumerable<T>>
    {
        /// <inheritdoc />
        public bool Equals(
            IEnumerable<T> x,
            IEnumerable<T> y)
        {
            if (ReferenceEquals(x, y))
            {
                return true;
            }

            if (ReferenceEquals(x, null) || ReferenceEquals(y, null))
            {
                return false;
            }

            var result = x.SequenceEqual(y);

            return result;
        }

        /// <inheritdoc />
        public int GetHashCode(
            IEnumerable<T> obj)
        {
            var result = HashCodeHelper.Initialize().HashElements(obj).Value;

            return result;
        }
    }
}
