// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReadOnlyDictionaryEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Collection source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Collection.Recipes
{
    using System.Collections.Generic;

    /// <summary>
    /// An implementation of <see cref="IEqualityComparer{T}"/> for any <see cref="IReadOnlyDictionary{TKey, TValue}"/>.
    /// </summary>
    /// <typeparam name="TKey">The type of dictionary keys.</typeparam>
    /// <typeparam name="TValue">The type of dictionary values.</typeparam>
#if !OBeautifulCodeCollectionRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Collection", "See package version number")]
    internal
#else
    public
#endif
        class ReadOnlyDictionaryEqualityComparer<TKey, TValue> : IEqualityComparer<IReadOnlyDictionary<TKey, TValue>>
    {
        /// <inheritdoc />
        public bool Equals(
            IReadOnlyDictionary<TKey, TValue> x,
            IReadOnlyDictionary<TKey, TValue> y)
        {
            var result = x.DictionaryEqual(y);

            return result;
        }

        /// <inheritdoc />
        public int GetHashCode(
            IReadOnlyDictionary<TKey, TValue> obj)
        {
            // This requires the elements to be sortable (implement IComparable)
            // It's highly unlikely that a Dictionary will be constructed with an instance of
            // this EqualityComparer.
            // However, this comparer IS used internally, by some of the
            // equality methods in EnumerableExtensions.  As such, we always return 0, which guarantees
            // that two objects that are equal return the same hash code (the contract is perfectly ok
            // if the same hash code is returned for two objects that are NOT equal).
            // see: https://stackoverflow.com/questions/4095395/whats-the-role-of-gethashcode-in-the-iequalitycomparert-in-net
            return 0;
        }
    }
}
