// --------------------------------------------------------------------------------------------------------------------
// <copyright file="EnumerableEqualityComparer.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Equality.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Equality.Recipes
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;

    using static System.FormattableString;

    /// <summary>
    /// An implementation of <see cref="IEqualityComparer{T}"/> for any <see cref="IEnumerable{T}"/>.
    /// </summary>
    /// <remarks>
    /// Adapted from: <a href="https://stackoverflow.com/a/14675741/356790" />.
    /// </remarks>
    /// <typeparam name="T">The type of objects to enumerate.</typeparam>
#if !OBeautifulCodeEqualityRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Equality.Recipes", "See package version number")]
    internal
#else
    public
#endif
        class EnumerableEqualityComparer<T> : IEqualityComparer<IEnumerable<T>>
    {
        private readonly EnumerableEqualityComparerStrategy enumerableEqualityComparerStrategy;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnumerableEqualityComparer{T}"/> class.
        /// </summary>
        /// <param name="enumerableEqualityComparerStrategy">The strategy to use when comparing two <see cref="IEnumerable{T}"/> for equality.</param>
        public EnumerableEqualityComparer(
            EnumerableEqualityComparerStrategy enumerableEqualityComparerStrategy = EnumerableEqualityComparerStrategy.SequenceEqual)
        {
            this.enumerableEqualityComparerStrategy = enumerableEqualityComparerStrategy;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations", Justification = "This is an appropriate exception to raise.")]
        public bool Equals(
            IEnumerable<T> x,
            IEnumerable<T> y)
        {
            bool result;

            switch (this.enumerableEqualityComparerStrategy)
            {
                case EnumerableEqualityComparerStrategy.SequenceEqual:
                    result = x.IsSequenceEqualTo(y);
                    break;
                case EnumerableEqualityComparerStrategy.UnorderedEqual:
                    result = x.IsUnorderedEqualTo(y);
                    break;
                default:
                    throw new NotSupportedException(Invariant($"This {nameof(EnumerableEqualityComparerStrategy)} is not supported: {this.enumerableEqualityComparerStrategy}."));
            }

            return result;
        }

        /// <inheritdoc />
        [SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations", Justification = "This is an appropriate exception to raise.")]
        public int GetHashCode(
            IEnumerable<T> obj)
        {
            // It's highly unlikely that a Dictionary (or some other data structure that relies on
            // hashing) will be constructed with an instance of this EqualityComparer.
            // This method is NOT used by internally by EqualityExtensions.
            // If needed in the future, we can use HashCodeHelper.
            // see: https://stackoverflow.com/questions/4095395/whats-the-role-of-gethashcode-in-the-iequalitycomparert-in-net
            throw new NotImplementedException();
        }
    }
}
