// --------------------------------------------------------------------------------------------------------------------
// <copyright file="CollectionExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Collection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Collection.Recipes
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

    using OBeautifulCode.Validation.Recipes;

    /// <summary>
    /// Helper methods for operating on objects of type <see cref="ICollection{T}"/>.
    /// </summary>
#if !OBeautifulCodeCollectionRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Collection.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class CollectionExtensions
    {
        /// <summary>
        /// Adds the elements of the specified <see cref="IEnumerable"/> to an <see cref="ICollection"/>.
        /// </summary>
        /// <typeparam name="T">The type of elements in the collection.</typeparam>
        /// <param name="collection">The collection to add to.</param>
        /// <param name="valuesToAdd">
        /// The <see cref="IEnumerable"/> whose elements should be added to the <see cref="ICollection"/>.
        /// The <see cref="IEnumerable"/> itself cannot be a null reference, but it can contain elements that are a null reference.
        /// </param>
        /// <exception cref="ArgumentNullException"><paramref name="collection"/> is null.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="valuesToAdd"/> is null.</exception>
        public static void AddRange<T>(
            this ICollection<T> collection,
            IEnumerable<T> valuesToAdd)
        {
            new { collection }.Must().NotBeNull();

            // ReSharper disable once PossibleMultipleEnumeration
            new { valuesToAdd }.Must().NotBeNull();

            // ReSharper disable once PossibleMultipleEnumeration
            foreach (var item in valuesToAdd)
            {
                collection.Add(item);
            }
        }
    }
}