// --------------------------------------------------------------------------------------------------------------------
// <copyright file="GroupingExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Collection.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Collection.Recipes
{
    using global::System;
    using global::System.Collections;
    using global::System.Collections.Generic;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Linq;
    using OBeautifulCode.CodeAnalysis.Recipes;

    /// <summary>
    /// Extension methods that perform grouping.
    /// </summary>
#if !OBeautifulCodeCollectionSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Collection.Recipes", "See package version number")]
    internal
#else
    [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
    [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
    [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
    public
#endif
    static class GroupingExtensions
    {
        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null))
            {
                result = values
                    .GroupBy(_ => new { })
                    .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                    .ToList();
            }
            else if ((selectorOne != null))
            {
                result = values
                    .GroupBy(_ => new { KeyOne = selectorOne(_), })
                    .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                    .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }
        
        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null) && (selectorTwo == null))
            {
                result = values
                    .GroupBy(_ => new { })
                    .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                    .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null))
            {
                result = values
                    .GroupBy(_ => new { KeyOne = selectorOne(_), })
                    .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                    .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null))
            {
                result = values
                    .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                    .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                    .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null))
            {
                result = values
                    .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                    .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                    .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }
        
        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <typeparam name="TKeyThree">The type of the third key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <param name="selectorThree">The third selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo, TKeyThree>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo,
            Func<TItem, TKeyThree> selectorThree)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null))
            {
                result = values
                .GroupBy(_ => new { })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }
        
        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <typeparam name="TKeyThree">The type of the third key.</typeparam>
        /// <typeparam name="TKeyFour">The type of the fourth key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <param name="selectorThree">The third selector.</param>
        /// <param name="selectorFour">The fourth selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo, TKeyThree, TKeyFour>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo,
            Func<TItem, TKeyThree> selectorThree,
            Func<TItem, TKeyFour> selectorFour)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;
            if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }
        
        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <typeparam name="TKeyThree">The type of the third key.</typeparam>
        /// <typeparam name="TKeyFour">The type of the fourth key.</typeparam>
        /// <typeparam name="TKeyFive">The type of the fifth key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <param name="selectorThree">The third selector.</param>
        /// <param name="selectorFour">The fourth selector.</param>
        /// <param name="selectorFive">The fifth selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo, TKeyThree, TKeyFour, TKeyFive>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo,
            Func<TItem, TKeyThree> selectorThree,
            Func<TItem, TKeyFour> selectorFour,
            Func<TItem, TKeyFive> selectorFive)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }

        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <typeparam name="TKeyThree">The type of the third key.</typeparam>
        /// <typeparam name="TKeyFour">The type of the fourth key.</typeparam>
        /// <typeparam name="TKeyFive">The type of the fifth key.</typeparam>
        /// <typeparam name="TKeySix">The type of the sixth key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <param name="selectorThree">The third selector.</param>
        /// <param name="selectorFour">The fourth selector.</param>
        /// <param name="selectorFive">The fifth selector.</param>
        /// <param name="selectorSix">The sixth selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo, TKeyThree, TKeyFour, TKeyFive, TKeySix>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo,
            Func<TItem, TKeyThree> selectorThree,
            Func<TItem, TKeyFour> selectorFour,
            Func<TItem, TKeyFive> selectorFive,
            Func<TItem, TKeySix> selectorSix)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }
        
        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <typeparam name="TKeyThree">The type of the third key.</typeparam>
        /// <typeparam name="TKeyFour">The type of the fourth key.</typeparam>
        /// <typeparam name="TKeyFive">The type of the fifth key.</typeparam>
        /// <typeparam name="TKeySix">The type of the sixth key.</typeparam>
        /// <typeparam name="TKeySeven">The type of the seventh key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <param name="selectorThree">The third selector.</param>
        /// <param name="selectorFour">The fourth selector.</param>
        /// <param name="selectorFive">The fifth selector.</param>
        /// <param name="selectorSix">The sixth selector.</param>
        /// <param name="selectorSeven">The seventh selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo, TKeyThree, TKeyFour, TKeyFive, TKeySix, TKeySeven>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo,
            Func<TItem, TKeyThree> selectorThree,
            Func<TItem, TKeyFour> selectorFour,
            Func<TItem, TKeyFive> selectorFive,
            Func<TItem, TKeySix> selectorSix,
            Func<TItem, TKeySeven> selectorSeven)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }

        /// <summary>
        /// Groups the values by the specified selectors, if any selectors are null they will be ignored.
        /// </summary>
        /// <typeparam name="TItem">The type of the item.</typeparam>
        /// <typeparam name="TKeyOne">The type of the first key.</typeparam>
        /// <typeparam name="TKeyTwo">The type of the second key.</typeparam>
        /// <typeparam name="TKeyThree">The type of the third key.</typeparam>
        /// <typeparam name="TKeyFour">The type of the fourth key.</typeparam>
        /// <typeparam name="TKeyFive">The type of the fifth key.</typeparam>
        /// <typeparam name="TKeySix">The type of the sixth key.</typeparam>
        /// <typeparam name="TKeySeven">The type of the seventh key.</typeparam>
        /// <typeparam name="TKeyEight">The type of the eighth key.</typeparam>
        /// <param name="values">The values.</param>
        /// <param name="selectorOne">The first selector.</param>
        /// <param name="selectorTwo">The second selector.</param>
        /// <param name="selectorThree">The third selector.</param>
        /// <param name="selectorFour">The fourth selector.</param>
        /// <param name="selectorFive">The fifth selector.</param>
        /// <param name="selectorSix">The sixth selector.</param>
        /// <param name="selectorSeven">The seventh selector.</param>
        /// <param name="selectorEight">The eighth selector.</param>
        /// <returns>
        /// The values grouped by the specified selectors.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="values"/> is null.</exception>
        #if !OBeautifulCodeCollectionSolution
        #else
        [SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals", Justification = ObcSuppressBecause.CA_ALL_NotApplicable)]
        [SuppressMessage("Microsoft.Maintainability", "CA1505:AvoidUnmaintainableCode", Justification = ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment)]
        [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment)]
        #endif
        public static IEnumerable<IGrouping<IReadOnlyList<object>, TItem>> ConditionalGroupBy<TItem, TKeyOne, TKeyTwo, TKeyThree, TKeyFour, TKeyFive, TKeySix, TKeySeven, TKeyEight>(
            this IEnumerable<TItem> values,
            Func<TItem, TKeyOne> selectorOne,
            Func<TItem, TKeyTwo> selectorTwo,
            Func<TItem, TKeyThree> selectorThree,
            Func<TItem, TKeyFour> selectorFour,
            Func<TItem, TKeyFive> selectorFive,
            Func<TItem, TKeySix> selectorSix,
            Func<TItem, TKeySeven> selectorSeven,
            Func<TItem, TKeyEight> selectorEight)
        {
            if (values == null)
            {
                throw new ArgumentNullException(nameof(values));
            }

            IEnumerable<Grouping<IReadOnlyList<object>, TItem>> result;

            if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight == null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven == null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix == null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive == null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour == null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree == null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo == null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne == null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else if ((selectorOne != null) && (selectorTwo != null) && (selectorThree != null) && (selectorFour != null) && (selectorFive != null) && (selectorSix != null) && (selectorSeven != null) && (selectorEight != null))
            {
                result = values
                .GroupBy(_ => new { KeyOne = selectorOne(_), KeyTwo = selectorTwo(_), KeyThree = selectorThree(_), KeyFour = selectorFour(_), KeyFive = selectorFive(_), KeySix = selectorSix(_), KeySeven = selectorSeven(_), KeyEight = selectorEight(_), })
                .Select(_ => new Grouping<IReadOnlyList<object>, TItem>(new object[] { _.Key.KeyOne, _.Key.KeyTwo, _.Key.KeyThree, _.Key.KeyFour, _.Key.KeyFive, _.Key.KeySix, _.Key.KeySeven, _.Key.KeyEight, }, _))
                .ToList();
            }
            else
            {
                throw new InvalidOperationException("It should not be possible to get here.  All combinations of null and not null selectors should have been generated above.");
            }

            return result;
        }

        /// <summary>
        /// Basic property based implementation the <see cref="IGrouping{TKey, TElement}" />.
        /// </summary>
        /// <typeparam name="TKey">The type of the key.</typeparam>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <seealso cref="IGrouping{TKey, TElement}" />
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = ObcSuppressBecause.CA1710_IdentifiersShouldHaveCorrectSuffix_NameDirectlyExtendedOrImplementedTypeAddedAsSuffixForTestsWhereTypeIsPrimaryConcern)]
        #if !OBeautifulCodeCollectionSolution
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
            [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Collection.Recipes", "See package version number")]
            internal
        #else
            public
        #endif
        class Grouping<TKey, TElement> : IGrouping<TKey, TElement>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="Grouping{TKey, TElement}"/> class.
            /// </summary>
            /// <param name="key">The key.</param>
            /// <param name="elements">The elements.</param>
            public Grouping(
                TKey key,
                IEnumerable<TElement> elements)
            {
                if (elements == null)
                {
                    throw new ArgumentNullException(nameof(elements));
                }

                this.Key = key;
                this.Elements = elements;
            }

            /// <summary>
            /// Gets the key of the <see cref="T:System.Linq.IGrouping`2" />.
            /// </summary>
            public TKey Key { get; private set; }

            /// <summary>
            /// Gets the elements for the <see cref="T:System.IEnumerable"/>.
            /// </summary>
            public IEnumerable<TElement> Elements { get; private set; }

            /// <inheritdoc />
            public IEnumerator<TElement> GetEnumerator()
            {
                return this.Elements.GetEnumerator();
            }

            /// <inheritdoc />
            IEnumerator IEnumerable.GetEnumerator()
            {
                return this.Elements.GetEnumerator();
            }
        }
    }
}
