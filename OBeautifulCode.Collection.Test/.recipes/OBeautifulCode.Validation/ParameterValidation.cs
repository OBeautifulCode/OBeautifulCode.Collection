// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParameterValidation.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Validation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Validation.Recipes
{
    using System;

    /// <summary>
    /// Contains all validations that can be applied to a <see cref="Parameter"/>.
    /// </summary>
#if !OBeautifulCodeValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Validation", "See package version number")]
    internal
#else
    public
#endif
        static partial class ParameterValidation
    {
        /// <summary>
        /// Validates that the reference type or nullable parameter is null.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeNull(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeNullInternal,
                ValidationName = nameof(BeNull),
                TypeValidations = MustBeNullableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the reference type or nullable parameter is not null.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNull(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeNullInternal,
                ValidationName = nameof(NotBeNull),
                TypeValidations = MustBeNullableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the bool or bool? parameter is true.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeTrue(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeTrueInternal,
                ValidationName = nameof(BeTrue),
                TypeValidations = MustBeBooleanTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the bool or bool? parameter is not true.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeTrue(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeTrueInternal,
                ValidationName = nameof(NotBeTrue),
                TypeValidations = MustBeBooleanTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the bool or bool? parameter is false.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeFalse(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeFalseInternal,
                ValidationName = nameof(BeFalse),
                TypeValidations = MustBeBooleanTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the bool? or bool? parameter is not false.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeFalse(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeFalseInternal,
                ValidationName = nameof(NotBeFalse),
                TypeValidations = MustBeBooleanTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is neither null nor whitespace.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorWhiteSpace(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeNullNorWhiteSpaceInternal,
                ValidationName = nameof(NotBeNullNorWhiteSpace),
                TypeValidations = MustBeStringTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is null or not white space.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeNullOrNotWhiteSpace(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeNullOrNotWhiteSpaceInternal,
                ValidationName = nameof(BeNullOrNotWhiteSpace),
                TypeValidations = MustBeStringTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the guid or guid? parameter is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyGuid(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeEmptyGuidInternal,
                ValidationName = nameof(BeEmptyGuid),
                TypeValidations = MustBeGuidTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the guid or guid? parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyGuid(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyGuidInternal,
                ValidationName = nameof(NotBeEmptyGuid),
                TypeValidations = MustBeGuidTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyString(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeEmptyStringInternal,
                ValidationName = nameof(BeEmptyString),
                TypeValidations = MustBeStringTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyString(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyStringInternal,
                ValidationName = nameof(NotBeEmptyString),
                TypeValidations = MustBeStringTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyEnumerable(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeEmptyEnumerableInternal,
                ValidationName = nameof(BeEmptyEnumerable),
                TypeValidations = MustBeEnumerableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyEnumerable(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyEnumerableInternal,
                ValidationName = nameof(NotBeEmptyEnumerable),
                TypeValidations = MustBeEnumerableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IDictionary, IDictionary{TKey,TValue}, or IReadOnlyDictionary{TKey,TValue} parameter is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyDictionary(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeEmptyDictionaryInternal,
                ValidationName = nameof(BeEmptyDictionary),
                TypeValidations = MustBeDictionaryTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IDictionary, IDictionary{TKey,TValue}, or IReadOnlyDictionary{TKey,TValue} parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyDictionary(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyDictionaryInternal,
                ValidationName = nameof(NotBeEmptyDictionary),
                TypeValidations = MustBeDictionaryTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter contains at least one null element.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter ContainSomeNullElements(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = ContainSomeNullElementsInternal,
                ValidationName = nameof(ContainSomeNullElements),
                TypeValidations = MustBeEnumerableOfNullableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter does not contain any null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotContainAnyNullElements(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotContainAnyNullElementsInternal,
                ValidationName = nameof(NotContainAnyNullElements),
                TypeValidations = MustBeEnumerableOfNullableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IDictionary, IDictionary{TKey,TValue}, or IReadOnlyDictionary{TKey,TValue} parameter contains at least one null value.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter ContainSomeKeyValuePairsWithNullValue(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = ContainSomeKeyValuePairsWithNullValueInternal,
                ValidationName = nameof(ContainSomeKeyValuePairsWithNullValue),
                TypeValidations = MustBeDictionaryOfNullableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IDictionary, IDictionary{TKey,TValue}, or IReadOnlyDictionary{TKey,TValue} parameter does not contain any null values.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotContainAnyKeyValuePairsWithNullValue(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotContainAnyKeyValuePairsWithNullValueInternal,
                ValidationName = nameof(NotContainAnyKeyValuePairsWithNullValue),
                TypeValidations = MustBeDictionaryOfNullableTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is not null nor empty.
        /// </summary>
        /// <remarks>
        /// This validation is effectively the same as <see cref="NotBeEmptyEnumerable"/> and exists for completeness.
        /// </remarks>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorEmptyEnumerable(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyEnumerableInternal,
                ValidationName = nameof(NotBeNullNorEmptyEnumerable),
                TypeValidations = MustBeEnumerableTypeValidations,
            };

            parameter.Validate(validation);

            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is not null nor empty nor contains any null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorEmptyEnumerableNorContainAnyNulls(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validationName = nameof(NotBeNullNorEmptyEnumerableNorContainAnyNulls);

            var validation1 = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyEnumerableInternal,
                ValidationName = validationName,
                TypeValidations = MustBeEnumerableOfNullableTypeValidations,
            };

            var validation2 = new Validation
            {
                Because = because,
                ValueValidationHandler = NotContainAnyNullElementsInternal,
                ValidationName = validationName,
                TypeValidations = null,
            };

            parameter.Validate(validation1);
            parameter.Validate(validation2);

            return parameter;
        }

        /// <summary>
        /// Validates that the IDictionary, IDictionary{TKey,TValue}, or IReadOnlyDictionary{TKey,TValue} parameter is not null nor empty nor contains any null values.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorEmptyDictionaryNorContainAnyNullValues(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validationName = nameof(NotBeNullNorEmptyDictionaryNorContainAnyNullValues);

            var validation1 = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyDictionaryInternal,
                ValidationName = validationName,
                TypeValidations = MustBeDictionaryOfNullableTypeValidations,
            };

            var validation2 = new Validation
            {
                Because = because,
                ValueValidationHandler = NotContainAnyKeyValuePairsWithNullValueInternal,
                ValidationName = validationName,
                TypeValidations = null,
            };

            parameter.Validate(validation1);
            parameter.Validate(validation2);

            return parameter;
        }

        /// <summary>
        /// Validates that the IDictionary, IDictionary{TKey,TValue}, or IReadOnlyDictionary{TKey,TValue} parameter is not null nor empty.
        /// </summary>
        /// <remarks>
        /// This validation is effectively the same as <see cref="NotBeEmptyDictionary"/> and exists for completeness.
        /// </remarks>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorEmptyDictionary(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEmptyDictionaryInternal,
                ValidationName = nameof(NotBeNullNorEmptyDictionary),
                TypeValidations = MustBeDictionaryTypeValidations,
            };

            parameter.Validate(validation);

            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is equal to default(T).
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeDefault(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeDefaultInternal,
                ValidationName = nameof(BeDefault),
                TypeValidations = null,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is not equal to default(T).
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeDefault(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeDefaultInternal,
                ValidationName = nameof(NotBeDefault),
                TypeValidations = null,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is less than some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeLessThan<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeLessThanInternal,
                ValidationName = nameof(BeLessThan),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is not less than some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeLessThan<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeLessThanInternal,
                ValidationName = nameof(NotBeLessThan),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is greater than some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeGreaterThan<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeGreaterThanInternal,
                ValidationName = nameof(BeGreaterThan),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is not greater than some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeGreaterThan<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeGreaterThanInternal,
                ValidationName = nameof(NotBeGreaterThan),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is less than or equal to some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeLessThanOrEqualTo<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeLessThanOrEqualToInternal,
                ValidationName = nameof(BeLessThanOrEqualTo),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is not less or equal to some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeLessThanOrEqualTo<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeLessThanOrEqualToInternal,
                ValidationName = nameof(NotBeLessThanOrEqualTo),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is greater than or equal to some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeGreaterThanOrEqualTo<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeGreaterThanOrEqualToInternal,
                ValidationName = nameof(BeGreaterThanOrEqualTo),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is not greater than or equal to some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeGreaterThanOrEqualTo<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeGreaterThanOrEqualToInternal,
                ValidationName = nameof(NotBeGreaterThanOrEqualTo),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is equal to some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEqualTo<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeEqualToInternal,
                ValidationName = nameof(BeEqualTo),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = EqualsTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is not equal to some specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="comparisonValue">The value to compare the parameter value to.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEqualTo<T>(
            [ValidatedNotNull] this Parameter parameter,
            T comparisonValue,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeEqualToInternal,
                ValidationName = nameof(NotBeEqualTo),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(comparisonValue),
                        Value = comparisonValue,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = EqualsTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is within a specified range.
        /// </summary>
        /// <typeparam name="T">The type of the comparison values.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="minimum">The minimum comparison value (start of the range).</param>
        /// <param name="maximum">The maximum comparison value (end of the range).</param>
        /// <param name="endpointDelineation">Optional instruction on whether the range is inclusive or exclusive of the endpoints.  Default is to include both the <paramref name="minimum"/> and <paramref name="maximum"/> in the range.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeInRange<T>(
            [ValidatedNotNull] this Parameter parameter,
            T minimum,
            T maximum,
            Range endpointDelineation = Range.IncludesMinimumAndMaximum,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            if (endpointDelineation != Range.IncludesMinimumAndMaximum)
            {
                throw new NotImplementedException("This endpoint delineation is not yet implemented: " + endpointDelineation);
            }

            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = BeInRangeInternal,
                ValidationName = nameof(BeInRange),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(minimum),
                        Value = minimum,
                        ValueType = typeof(T),
                    },
                    new ValidationParameter
                    {
                        Name = nameof(maximum),
                        Value = maximum,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IComparable or IComparable{T} parameter is not within a specified range.
        /// </summary>
        /// <typeparam name="T">The type of the comparison values.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="minimum">The minimum comparison value (start of the range).</param>
        /// <param name="maximum">The maximum comparison value (end of the range).</param>
        /// <param name="endpointDelineation">Optional instruction on whether the range is inclusive or exclusive of the endpoints.  Default is to include both the <paramref name="minimum"/> and <paramref name="maximum"/> in the range.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeInRange<T>(
            [ValidatedNotNull] this Parameter parameter,
            T minimum,
            T maximum,
            Range endpointDelineation = Range.IncludesMinimumAndMaximum,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            if (endpointDelineation != Range.IncludesMinimumAndMaximum)
            {
                throw new NotImplementedException("This endpoint delineation is not yet implemented: " + endpointDelineation + ".");
            }

            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotBeInRangeInternal,
                ValidationName = nameof(NotBeInRange),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(minimum),
                        Value = minimum,
                        ValueType = typeof(T),
                    },
                    new ValidationParameter
                    {
                        Name = nameof(maximum),
                        Value = maximum,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = InequalityTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter contains a specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="itemToSearchFor">The item to search for.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter Contain<T>(
            [ValidatedNotNull] this Parameter parameter,
            T itemToSearchFor,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = ContainInternal,
                ValidationName = nameof(Contain),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(itemToSearchFor),
                        Value = itemToSearchFor,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = ContainmentTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter does not contain a specified value.
        /// </summary>
        /// <typeparam name="T">The type of the comparison value.</typeparam>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="itemToSearchFor">The item to search for.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotContain<T>(
            [ValidatedNotNull] this Parameter parameter,
            T itemToSearchFor,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = NotContainInternal,
                ValidationName = nameof(NotContain),
                ValidationParameters = new[]
                {
                    new ValidationParameter
                    {
                        Name = nameof(itemToSearchFor),
                        Value = itemToSearchFor,
                        ValueType = typeof(T),
                    },
                },
                TypeValidations = ContainmentTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }

        /// <summary>
        /// Always throws.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Optional rationale for the validation, used in the exception message if the parameter fails this validation.  The default is use the framework-generated exception message as-is.</param>
        /// <param name="applyBecause">Optional value that determines how to apply the <paramref name="because"/>, when specified.  The default is to prefix the framework-generated exception message with <paramref name="because"/>.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeOfTypeThatDoesNotExist(
            [ValidatedNotNull] this Parameter parameter,
            string because = null,
            ApplyBecause applyBecause = ApplyBecause.PrefixedToDefaultMessage)
        {
            var validation = new Validation
            {
                Because = because,
                ApplyBecause = applyBecause,
                ValueValidationHandler = null,
                ValidationName = nameof(BeOfTypeThatDoesNotExist),
                TypeValidations = AlwaysThrowTypeValidations,
            };

            parameter.Validate(validation);
            return parameter;
        }
    }
}
